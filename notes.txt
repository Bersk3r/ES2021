# 목적 : JS 문법, 순서도 그리기
# 에디터는 자동 완성 기능, 혹은 생산성 향상을 위해 설치
# 크롬 브라우저는 최신 자바스크립트 문법 호환 목적 (인터넷 익스플로러는 호환이 안될 수 있음)
# 코드 검토 : 오타 -> 잘못된 명령
# () :  parentheses, {} : braces, [] : brackets
# 자바스크립트는 인터프리터 형식
# REPL : 브라우저 콘솔, 한 줄씩 코드를 입력 (READ) 받고 평가(EVAL)한 후, 결과를 출력 (PRINT), 이후, 다시 프롬프트가 나타나 새로운 입력을 대기 (LOOP)
(Read-Eval-Print-Loop)
# 프로그래밍 사고력 : 프로그램/컴퓨터 입장에서 생각하는 것
(컴퓨터/사람의 차이점을 이해해야 프로그래밍이 유리)
# 알고리즘 = 순서도 : 순서도 구조를 효율적으로 단축시키는 것이 좋음 
# 자바스크립트는 까다롭다 = 오타 하나로 에러를 뿜음 (띄어쓰기, 대소문자 실수)
# 세미콜론 붙이는 것을 추천 (안 붙여서 에러 발생될 수 있음, 명령 하나씩 구분하는 목적)
# 주석 (//, /**/) : 어려운 코드 (인수인계) 설명에 도움 (프로그래밍은 사유를 설명해야 되므로)
(/**/는 코드 사이에 주석 가능 ex> var hello = /* 안녕 */ 'hello')
# 들여쓰기 : 코드 가독성 목적으로 중요! (가끔 들여쓰기로 인한 에러가 있기도 함)
# 값 (JS) :  프로그램이 조작할 수 있는 데이터
# 자료형 (JS) : 데이터 값의 종류 
# 문자열 (JS) : 시작과 끝이 작은/큰따옴표 혹은 백틱로 감싸진 값
(백틱(``)은 문자열 줄 바꿈이 가능하다. 작은/큰 따옴표는 \n으로 줄바꿈 가능)
(typeof '문자열'을 사용하면 자료형 확인 가능)
(typeof ''도 문자열)
# 문자열 합치기 : 
("안녕" + "하세요" (O))
# 정수 표현 : 10000, -2, 5e4(50000), 5e-4(0.0005), 0b111(7), 0111/0o111(73), 0x1a1(417), typeof 0x1a1 (number), typeof NaN [Not a Number] (number, 공식적으론 숫자)
('124' + 5 = 1245 (129 (x))) => 문자열 + 숫자 = 문자열, 형 변환 현상 (type casting)
('문자열' - 0 = NaN) => 문자열 (- | * | /) 숫자 = 숫자 (단, 문자열이 숫자 값인 경우, 정상적인 값 출력), Number 함수가 적용이 됨
(parseInt('124')/Number('124') = 문자열 124를 숫자로 변경, typeof parseInt('124'))
(Number('124') + 5 = 129, parseInt('124') + 5 = 129)
(Number('3.14') = 3.14, parseFloat('3.14') = 3.14, typeof parseFloat('3.14') = number )
(parseInt('3월') = 3, Number('3월') = NaN)
(typeof parseInt(*prompt())) => *prompt()는 문자열을 입력받는 함수
(parseInt(111,2) = 7 (이진법), parseInt(111,10) = 111 (십진법), 2**3 = 8 (** : 거듭제곱연산자))
(2/0 = Infinity, -2/0 = -Infinity, typeof Infinity = Number, Infinity - Infinity = NaN, 0/0 = NaN)
# 비슷한 기능을 하는 함수가 2개 이상 존재하면 그건 반드시 차이점이 존재한다.
('1231231'.substr(0,2) = "12",'1231231'.substring(0,2) = "12")
# 연산자 우선 순위
<20> () (그룹화) -> <19> ., [], new, ()(함수 호출) -> <18> new (인수 없이) -> <17> ++(후위), --(후위) 
-> <16> !, ~, +(단항), -(단항), ++ (전위), -- (전위), typeof, void, delete, await -> <15> ** -> <14> *, /, %
-> <13> +(다항), -(다항) -> <12> <<, >>, >>> -> <11> <, <=, >, >=, in, instanceof -> <10> ==, !=, ===, !== 
-> <9> & -> <8> ^ -> <7> | -> <6> && -> <5> || -> <4> ?: (삼항 연산자) -> <3> =, +=, -=, **=, *=, /=-, %=, <<=, >>=, >>>=, &=, ^=, |=
-> <2> yield, yield* -> <1> ,(쉼표)
# 자바스크립트는 정수 뿐만 아닌 실수도 계산할 수 있습니다.
(0.5 + 0.5 = 1, 0.1 + 0.2 = 0.30000...04, 0.3 - 0.1 = 0.1999999...98 (이진수로 계산하므로 오타 발생, 컴퓨터의 부동 소수점 문제 검색)) => 해결 방법 : (0.3 * 10 - 0.1 * 10)/10 = 0.2 (정수로 만든 다음 다시 실수로 변경)
# 불 값 : 조지 불 (George Boole)에서 따온 이름으로, 0/1 혹은 true/false (JS)로 표현함 
('true'는 boolean이 아닌 string, typeof true; = boolean, 5 > 3; = true, 5 < 3; = false)
(NaN != NaN; = true (NaN은 같지 않다 빼고 전부 false), true > false; = true (true(1)가 false(0)보다 큰 값이므로))
('b' > 'a' = true (ascii 값 상으로 크므로), '&'.charCodeAt() = 38 (charCodeAt() : 아스키 값을 반환하는 함수))
('3' < 5; = true (문자열(숫자)와 숫자를 비교하면 문자열이 숫자로 변환됨), 'abc' < 5; = false (abc를 숫자로 변환하면 NaN이 됨, NaN과의 무조건 비교는 false))
('0' < true; = true (true가 1로 변환된 후 비교하므로))
# == (!=)와 === (!==)의 차이점 : ==은 값만 비교하고, ===은 값과 자료형이 같은지 비교합니다.
('1' == 1; = true, 1 == true; = true, 1 == '1'; = true) -> ('1' === 1; = false, 1 == true; = false, 1 == '1'; = false)
# 논리 연산자 :
(10 > 5 && 6 < 8; = true, 10 < 5 || 6 < 8 ; true, 10 < 5 || 6 > 8; = false)
(진리표를 검색할 것, !true; = false, !false; = true)
(!!'a'; = true (!! : boolean으로 형변환 하는 연산자), Boolean('a'); = true, !!false; = false, !!''; = false, !!0; = false, !!NaN; = false) -> false, ''(빈 문자열), 0, NaN, undefined, null, document.all은 전부 boolean 형 변환 시 false가 된다.
# 빈 값 : 컴퓨터는 대부분 결과 값을 반환
(*undefined : 자바스크립트에서 반환할 값이 없으면 undefined를 반환, typeof undefined; = undefined) -> console.log('Hello, world!'); = undefined
(*null : undeifned와 같은 빈 값이나, 의도적으로 넣는 값인 부분과 자료형이 다르다, typeof null; = object (JS에서 유명한 버그)) -> undefined == null; = true, undefined === null; = false
# 변수 : 프로그램을 만드는 경우, 값을 잠깐 저장해야 할 때가 있을 때 사용하는 것
(let string = 234123418; string = 234123418, console.log(string); = 234123418) -> 
*elm은 변수가 없는 대신, 모델을 상태 기억용으로 사용함.
# 변수는 선언하는 것이며, 이 때 값을 대입하는 것을 초기화라고 합니다.
(let, var, const로 시작하는 것을 선언문, 변수를 선언하면 undefined를 반환)
(브라우저에서 console, window, document과 같은 기본 변수를 제공)
(undefined는 값은 초기화 하지 않은 변수의 기본 값)
(변수는 2번 이상 선언 시, 오류가 발생, 특수 문자('$', '_'), 한글, 한자로 변수 선언이 가능, 숫자는 가능하나, 첫문자로 들어가는 건 안 됨)
(let zerochoIsBabo = 'hhaha'; (camel 케이스), 변수에서 예약어는 사용할 수 없음 (let은 예약어가 아님))
(let change = 'before' ~> undefined -> change = 'after' ~> after, let은 "문(statement)"이기 때문에 결과 값이 없다.)
(변수의 값을 비우는 방법은 변수에 undefined나 null을 넣으면 됨, 개발자는 null을 넣는 게 좋다 (의도적으로 지웠다는 것을 표시하기 위해))
(변수를 다른 변수에 대입 가능, number = number + 3; ~> 8)
# const, let, var 중에서 var는 옛날에 많이 사용했으며, 현재에는 let과 const를 많이 사용합니다.
(const로 선언할 때 반드시 초기화를 해야 한다, var는 예약어를 변수로 사용할 수 있다. 하지만 이건 오류가 발생될 수 있어, var는 되도록 사용하지 않는다.)
